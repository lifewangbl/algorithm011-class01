public class maxProfit_122 {
    /**
     * 买卖股票的最佳时机 II:给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。
     *          设计一个算法来计算你所能获取的最大利润。你可以尽可能地完成更多的交易（多次买卖一支股票）。
     *      注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。
     *      示例:
     *          输入:[7,1,5,3,6,4]
                输出: 7
     *          解释: 在第 2 天（股票价格 = 1）的时候买入，在第 3 天（股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。
     *                随后，在第 4 天（股票价格 = 3）的时候买入，在第 5 天（股票价格 = 6）的时候卖出, 这笔交易所能获得利润 = 6-3 = 3 。
     *
     *          输入: [1,2,3,4,5]
     *          输出: 4
     *          解释:在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。
     *              注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。
     *              因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。
     *  解题思路：天数、允许交易max次数，持有状态（0和1）
     *          由于交易次数无限制，所以可以忽略
     *          卖出股票后，加上卖出时的股票价格，买入后，减去买入时的股票价格
     *          最终获取卖出股票时的最大利润
     */
    public int maxProfit(int[] prices) {
        int n = prices.length;
        int dp_i_0 = 0;
        int dp_i_1 = Integer.MIN_VALUE;
        for(int i=0;i<n;i++){
            int temp = dp_i_0;
            dp_i_0 = Math.max(dp_i_0,dp_i_1+prices[i]);
            dp_i_1 = Math.max(dp_i_1,temp-prices[i]);
        }
        return dp_i_0;
    }

}
